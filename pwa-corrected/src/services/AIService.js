// Servi√ßo de IA para aplica√ß√£o web JUSTDIVE
class AIService {
  constructor() {
    const envBaseURL = import.meta.env?.VITE_API_URL;
    const browserBaseURL = typeof window !== 'undefined' && window.location
      ? window.location.origin
      : null;

    this.baseURL = envBaseURL || browserBaseURL || 'http://localhost:5000';
    this.conversationHistory = this.loadConversationHistory();
  }

  // Carregar hist√≥rico do localStorage
  loadConversationHistory() {
    try {
      const history = localStorage.getItem('justdive_chat_history');
      return history ? JSON.parse(history) : [];
    } catch (error) {
      console.error('Erro ao carregar hist√≥rico:', error);
      return [];
    }
  }

  // Salvar hist√≥rico no localStorage
  saveConversationHistory() {
    try {
      localStorage.setItem('justdive_chat_history', JSON.stringify(this.conversationHistory));
    } catch (error) {
      console.error('Erro ao salvar hist√≥rico:', error);
    }
  }


  // Processar mensagem com IA
  async processMessage(message, weatherContext = null) {
    try {
      const userMessage = typeof message === 'string'
        ? message
        : JSON.stringify(message);

      const conversation = [
        { role: 'system', content: 'Voc√™ √© o assistente virtual da JUSTDIVE Academy.' },
        { role: 'user', content: userMessage }
      ];

      const payload = {
        message: userMessage,
        messages: conversation
      };

      const response = await fetch(`${this.baseURL}/api/ai/chat`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });

      if (!response.ok) {
        throw new Error(`Erro da API: ${response.status}`);
      }

      const data = await response.json();
      const aiResponse = data.response || 'Desculpe, n√£o consegui processar a sua mensagem.';

      this.addToHistory(userMessage, aiResponse, weatherContext);

      return aiResponse;
    } catch (error) {
      console.error('Erro ao processar mensagem:', error);

      const fallbackResponse = 'Desculpe, estou com dificuldades t√©cnicas no momento. Por favor, tente novamente em alguns instantes.';
      const storedMessage = typeof message === 'string' ? message : JSON.stringify(message);
      this.addToHistory(storedMessage, fallbackResponse, { error: error.message });

      return fallbackResponse;
    }
  }
  // Gerar resposta de demonstra√ß√£o
  generateDemoResponse(message, weatherContext) {
    const lowerMessage = message.toLowerCase();
    
    // Respostas espec√≠ficas sobre condi√ß√µes meteorol√≥gicas
    if (lowerMessage.includes('clima') || lowerMessage.includes('tempo') || lowerMessage.includes('condi√ß√µes') || lowerMessage.includes('mergulho hoje')) {
      if (weatherContext) {
        const statusText = weatherContext.status === 'green' ? 'excelentes' : 
                          weatherContext.status === 'yellow' ? 'moderadas' : 'perigosas';
        
        let recommendation = '';
        if (weatherContext.status === 'green') {
          recommendation = 'Perfeito para mergulhar! Condi√ß√µes ideais para todos os n√≠veis de mergulho.';
        } else if (weatherContext.status === 'yellow') {
          recommendation = 'Condi√ß√µes aceit√°veis, mas recomendo cuidado extra. Ideal para mergulhadores experientes.';
        } else {
          recommendation = 'N√£o recomendo mergulho nestas condi√ß√µes por quest√µes de seguran√ßa.';
        }
        
        return `üåä **An√°lise das Condi√ß√µes Atuais:**

üìä **Dados Meteorol√≥gicos:**
‚Ä¢ Temperatura da √°gua: ${weatherContext.temperature}¬∞C
‚Ä¢ Altura das ondas: ${weatherContext.waveHeight}m
‚Ä¢ Velocidade do vento: ${weatherContext.windSpeed} km/h
‚Ä¢ Visibilidade: ${weatherContext.visibility} km

üö¶ **Status:** ${statusText.toUpperCase()}

üí° **Recomenda√ß√£o:** ${recommendation}

${weatherContext.hasClasses ? `üìÖ **Aulas Hoje:** ${weatherContext.nextClass || 'Consulte o cronograma'}` : 'üìÖ **Aulas:** Nenhuma aula programada para hoje'}`;
      }
      return 'üåä Para fornecer uma an√°lise precisa das condi√ß√µes de mergulho, preciso dos dados meteorol√≥gicos atuais. Verifique o widget meteorol√≥gico no dashboard para informa√ß√µes em tempo real.';
    }
    
    // Respostas sobre cursos e aulas
    if (lowerMessage.includes('aula') || lowerMessage.includes('curso') || lowerMessage.includes('open water') || lowerMessage.includes('certifica√ß√£o')) {
      return `üéì **Cursos JUSTDIVE Academy:**

üìö **Cursos Dispon√≠veis:**
‚Ä¢ **Open Water Diver** - Certifica√ß√£o b√°sica PADI
‚Ä¢ **Advanced Open Water** - Mergulhos de especialidade
‚Ä¢ **Rescue Diver** - T√©cnicas de salvamento
‚Ä¢ **Divemaster** - N√≠vel profissional

‚è∞ **Hor√°rios:** Consulte nossa agenda ou contacte-nos
üìç **Locais:** Sesimbra, Berlengas, Arr√°bida

Que n√≠vel de certifica√ß√£o tem atualmente?`;
    }
    
    // Respostas sobre equipamentos
    if (lowerMessage.includes('equipamento') || lowerMessage.includes('material') || lowerMessage.includes('gear')) {
      return `ü§ø **Equipamento de Mergulho:**

üéØ **Equipamento B√°sico:**
‚Ä¢ M√°scara e tubo de respira√ß√£o
‚Ä¢ Barbatanas e botins
‚Ä¢ Fato de mergulho (3mm ou 5mm)

üîß **Equipamento T√©cnico:**
‚Ä¢ Colete equilibrador (BCD)
‚Ä¢ Regulador com man√≥metro
‚Ä¢ Computador de mergulho
‚Ä¢ Lanterna subaqu√°tica

üí∞ **Servi√ßos:**
‚Ä¢ Aluguer de equipamento completo
‚Ä¢ Manuten√ß√£o e revis√µes
‚Ä¢ Venda de equipamento novo e usado

Precisa de algum equipamento espec√≠fico?`;
    }
    
    // Respostas sobre seguran√ßa
    if (lowerMessage.includes('seguran√ßa') || lowerMessage.includes('protocolo') || lowerMessage.includes('emerg√™ncia')) {
      return `üõ°Ô∏è **Protocolos de Seguran√ßa JUSTDIVE:**

‚úÖ **Antes do Mergulho:**
‚Ä¢ Verifica√ß√£o completa do equipamento
‚Ä¢ Briefing detalhado do local
‚Ä¢ An√°lise das condi√ß√µes meteorol√≥gicas
‚Ä¢ Planeamento do mergulho

ü§ù **Durante o Mergulho:**
‚Ä¢ Sistema de duplas obrigat√≥rio
‚Ä¢ Comunica√ß√£o por sinais
‚Ä¢ Monitoriza√ß√£o constante do ar
‚Ä¢ Respeito pelos limites de profundidade

üö® **Procedimentos de Emerg√™ncia:**
‚Ä¢ Oxig√©nio de emerg√™ncia dispon√≠vel
‚Ä¢ Contacto direto com servi√ßos de emerg√™ncia
‚Ä¢ Instrutores certificados em primeiros socorros

A sua seguran√ßa √© a nossa prioridade m√°xima!`;
    }
    
    // Respostas sobre locais de mergulho
    if (lowerMessage.includes('local') || lowerMessage.includes('spot') || lowerMessage.includes('onde') || lowerMessage.includes('portugal')) {
      return `üó∫Ô∏è **Melhores Spots de Mergulho em Portugal:**

üèùÔ∏è **Berlengas (Peniche):**
‚Ä¢ Reserva natural com vida marinha rica
‚Ä¢ Visibilidade at√© 20m
‚Ä¢ Ideal para todos os n√≠veis

üèñÔ∏è **Sesimbra:**
‚Ä¢ Grutas e forma√ß√µes rochosas
‚Ä¢ Polvos, linguados e sargos
‚Ä¢ Mergulhos de parede espetaculares

üåä **Portinho da Arr√°bida:**
‚Ä¢ √Åguas cristalinas e protegidas
‚Ä¢ Cavalos-marinhos e nudibranquios
‚Ä¢ Perfeito para fotografia subaqu√°tica

üêü **Peniche:**
‚Ä¢ Naufr√°gios hist√≥ricos
‚Ä¢ Correntes ricas em nutrientes
‚Ä¢ Avistamentos de vida pel√°gica

Qual destes locais gostaria de explorar?`;
    }
    
    // Respostas sobre flutuabilidade
    if (lowerMessage.includes('flutuabilidade') || lowerMessage.includes('flutuar') || lowerMessage.includes('controlo')) {
      return `‚öñÔ∏è **Melhorar a Flutuabilidade:**

üéØ **T√©cnicas Fundamentais:**
‚Ä¢ Respira√ß√£o controlada e profunda
‚Ä¢ Ajustes graduais do BCD
‚Ä¢ Posi√ß√£o corporal hidrodin√¢mica
‚Ä¢ Distribui√ß√£o correta do peso

üí° **Dicas Pr√°ticas:**
‚Ä¢ Pratique em √°guas pouco profundas
‚Ä¢ Use o m√≠nimo de peso necess√°rio
‚Ä¢ Mantenha-se relaxado e calmo
‚Ä¢ Fa√ßa o curso Peak Performance Buoyancy

üèä **Exerc√≠cios Recomendados:**
‚Ä¢ Hovering (pairar) sem movimento
‚Ä¢ Subir e descer apenas com respira√ß√£o
‚Ä¢ Nadar sem usar as m√£os

A flutuabilidade perfeita vem com pr√°tica e paci√™ncia!`;
    }
    
    // Resposta de boas-vindas padr√£o
    if (lowerMessage.includes('ol√°') || lowerMessage.includes('oi') || lowerMessage.includes('bom dia') || lowerMessage.includes('boa tarde')) {
      return `üëã **Bem-vindo √† JUSTDIVE Academy!**

Sou o seu assistente virtual especializado em mergulho. Posso ajudar com:

üéì **Cursos e Certifica√ß√µes**
üåä **Condi√ß√µes Meteorol√≥gicas**
ü§ø **Equipamentos de Mergulho**
üó∫Ô∏è **Locais de Mergulho**
üõ°Ô∏è **Seguran√ßa e Protocolos**

Como posso ajud√°-lo hoje?`;
    }
    
    // Resposta gen√©rica mais estruturada
    return `ü§ø **Assistente JUSTDIVE Academy**

N√£o tenho certeza sobre a sua pergunta espec√≠fica, mas posso ajudar com:

üìö **Informa√ß√µes sobre cursos PADI**
üåä **An√°lise de condi√ß√µes meteorol√≥gicas**
üéØ **Recomenda√ß√µes de equipamento**
üó∫Ô∏è **Spots de mergulho em Portugal**
üõ°Ô∏è **Protocolos de seguran√ßa**

Pode reformular a sua pergunta ou escolher um dos t√≥picos acima?`;
  }

  // Adicionar ao hist√≥rico
  addToHistory(message, response, context) {
    const entry = {
      id: Date.now().toString(),
      message,
      response,
      context,
      timestamp: new Date().toISOString()
    };
    
    this.conversationHistory.push(entry);
    
    // Manter apenas as √∫ltimas 50 mensagens
    if (this.conversationHistory.length > 50) {
      this.conversationHistory = this.conversationHistory.slice(-50);
    }
    
    this.saveConversationHistory();
  }

  // Obter recomenda√ß√µes baseadas no clima
  async getWeatherRecommendations(weatherContext) {
    const message = `Com base nas condi√ß√µes meteorol√≥gicas atuais, que recomenda√ß√µes tens para os mergulhos de hoje?`;
    return await this.processMessage(message, weatherContext);
  }

  // Verificar se h√° aulas programadas
  async checkClassSchedule(weatherContext) {
    const message = `H√° aulas de mergulho programadas para hoje? Como est√£o as condi√ß√µes?`;
    return await this.processMessage(message, weatherContext);
  }

  // Limpar hist√≥rico
  clearHistory() {
    this.conversationHistory = [];
    localStorage.removeItem('justdive_chat_history');
  }

  // Obter estat√≠sticas de uso
  getUsageStats() {
    return {
      totalMessages: this.conversationHistory.length,
      lastActivity: this.conversationHistory.length > 0 ? 
        this.conversationHistory[this.conversationHistory.length - 1].timestamp : null
    };
  }

  // Obter hist√≥rico completo
  getHistory() {
    return this.conversationHistory;
  }
}

export default AIService;

